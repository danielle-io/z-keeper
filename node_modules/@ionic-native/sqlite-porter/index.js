var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SQLitePorterOriginal = /** @class */ (function (_super) {
    __extends(SQLitePorterOriginal, _super);
    function SQLitePorterOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SQLitePorterOriginal.prototype.importSqlToDb = function (db, sql) { return cordova(this, "importSqlToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorterOriginal.prototype.exportDbToSql = function (db) { return cordova(this, "exportDbToSql", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorterOriginal.prototype.importJsonToDb = function (db, json) { return cordova(this, "importJsonToDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorterOriginal.prototype.exportDbToJson = function (db) { return cordova(this, "exportDbToJson", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorterOriginal.prototype.wipeDb = function (db) { return cordova(this, "wipeDb", { "callbackStyle": "object", "successName": "successFn", "errorName": "errorFn" }, arguments); };
    SQLitePorterOriginal.pluginName = "SQLitePorter";
    SQLitePorterOriginal.plugin = "uk.co.workingedge.cordova.plugin.sqliteporter";
    SQLitePorterOriginal.pluginRef = "cordova.plugins.sqlitePorter";
    SQLitePorterOriginal.repo = "https://github.com/dpa99c/cordova-sqlite-porter";
    SQLitePorterOriginal.platforms = ["Amazon Fire OS", "Android", "BlackBerry 10", "Browser", "iOS", "Tizen", "Windows", "Windows Phone"];
    return SQLitePorterOriginal;
}(IonicNativePlugin));
var SQLitePorter = new SQLitePorterOriginal();
export { SQLitePorter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NxbGl0ZS1wb3J0ZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBZ0R0QyxnQ0FBaUI7Ozs7SUFZakQsb0NBQWEsYUFBQyxFQUFPLEVBQUUsR0FBVztJQWNsQyxvQ0FBYSxhQUFDLEVBQU87SUFlckIscUNBQWMsYUFBQyxFQUFPLEVBQUUsSUFBUztJQWNqQyxxQ0FBYyxhQUFDLEVBQU87SUFjdEIsNkJBQU0sYUFBQyxFQUFPOzs7Ozs7dUJBckhoQjtFQWdEa0MsaUJBQWlCO1NBQXRDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBTUUxpdGUgUG9ydGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgQ29yZG92YS9QaG9uZWdhcCBwbHVnaW4gY2FuIGJlIHVzZWQgdG8gaW1wb3J0L2V4cG9ydCB0by9mcm9tIGEgU1FMaXRlIGRhdGFiYXNlIHVzaW5nIGVpdGhlciBTUUwgb3IgSlNPTi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNRTGl0ZVBvcnRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvc3FsaXRlLXBvcnRlci9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNxbGl0ZVBvcnRlcjogU1FMaXRlUG9ydGVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBsZXQgZGIgPSB3aW5kb3cub3BlbkRhdGFiYXNlKCdUZXN0JywgJzEuMCcsICdUZXN0REInLCAxICogMTAyNCk7XG4gKiAvLyBvciB3ZSBjYW4gdXNlIFNRTGl0ZSBwbHVnaW5cbiAqIC8vIHdlIHdpbGwgYXNzdW1lIHRoYXQgd2UgaW5qZWN0ZWQgU1FMaXRlIGludG8gdGhpcyBjb21wb25lbnQgYXMgc3FsaXRlXG4gKiB0aGlzLnNxbGl0ZS5jcmVhdGUoe1xuICogICBuYW1lOiAnZGF0YS5kYicsXG4gKiAgIGxvY2F0aW9uOiAnZGVmYXVsdCdcbiAqIH0pXG4gKiAgIC50aGVuKChkYjogYW55KSA9PiB7XG4gKiAgICAgbGV0IGRiSW5zdGFuY2UgPSBkYi5fb2JqZWN0SW5zdGFuY2U7XG4gKiAgICAgLy8gd2UgY2FuIHBhc3MgZGIuX29iamVjdEluc3RhbmNlIGFzIHRoZSBkYXRhYmFzZSBvcHRpb24gaW4gYWxsIFNRTGl0ZVBvcnRlciBtZXRob2RzXG4gKiAgIH0pO1xuICpcbiAqXG4gKiBsZXQgc3FsID0gJ0NSRUFURSBUQUJMRSBBcnRpc3QgKFtJZF0gUFJJTUFSWSBLRVksIFtUaXRsZV0pOycgK1xuICogICAgICAgICAgICAnSU5TRVJUIElOVE8gQXJ0aXN0KElkLFRpdGxlKSBWQUxVRVMgKFwiMVwiLFwiRnJlZFwiKTsnO1xuICpcbiAqIHRoaXMuc3FsaXRlUG9ydGVyLmltcG9ydFNxbFRvRGIoZGIsIHNxbClcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0ltcG9ydGVkJykpXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUuZXJyb3IoZSkpO1xuICpcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTUUxpdGVQb3J0ZXInLFxuICBwbHVnaW46ICd1ay5jby53b3JraW5nZWRnZS5jb3Jkb3ZhLnBsdWdpbi5zcWxpdGVwb3J0ZXInLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuc3FsaXRlUG9ydGVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvY29yZG92YS1zcWxpdGUtcG9ydGVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FtYXpvbiBGaXJlIE9TJywgJ0FuZHJvaWQnLCAnQmxhY2tCZXJyeSAxMCcsICdCcm93c2VyJywgJ2lPUycsICdUaXplbicsICdXaW5kb3dzJywgJ1dpbmRvd3MgUGhvbmUnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU1FMaXRlUG9ydGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogRXhlY3V0ZXMgYSBzZXQgb2YgU1FMIHN0YXRlbWVudHMgYWdhaW5zdCB0aGUgZGVmaW5lZCBkYXRhYmFzZS4gQ2FuIGJlIHVzZWQgdG8gaW1wb3J0IGRhdGEgZGVmaW5lZCBpbiB0aGUgU1FMIHN0YXRlbWVudHMgaW50byB0aGUgZGF0YWJhc2UsIGFuZCBtYXkgYWRkaXRpb25hbGx5IGluY2x1ZGUgY29tbWFuZHMgdG8gY3JlYXRlIHRoZSB0YWJsZSBzdHJ1Y3R1cmUuXG4gICAqIEBwYXJhbSBkYiB7T2JqZWN0fSBEYXRhYmFzZSBvYmplY3RcbiAgICogQHBhcmFtIHNxbCB7c3RyaW5nfSBTUUwgc3RhdGVtZW50cyB0byBleGVjdXRlIGFnYWluc3QgdGhlIGRhdGFiYXNlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXG4gIH0pXG4gIGltcG9ydFNxbFRvRGIoZGI6IGFueSwgc3FsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnRzIGEgU1FMaXRlIERCIGFzIGEgc2V0IG9mIFNRTCBzdGF0ZW1lbnRzLlxuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXG4gIH0pXG4gIGV4cG9ydERiVG9TcWwoZGI6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRhYmxlIHN0cnVjdHVyZSBhbmQvb3Igcm93IGRhdGEgY29udGFpbmVkIHdpdGhpbiBhIEpTT04gc3RydWN0dXJlIGludG8gU1FMIHN0YXRlbWVudHMgdGhhdCBjYW4gYmUgZXhlY3V0ZWQgYWdhaW5zdCBhIFNRTGl0ZSBkYXRhYmFzZS4gQ2FuIGJlIHVzZWQgdG8gaW1wb3J0IGRhdGEgaW50byB0aGUgZGF0YWJhc2UgYW5kL29yIGNyZWF0ZSB0aGUgdGFibGUgc3RydWN0dXJlLlxuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XG4gICAqIEBwYXJhbSBqc29uIHtPYmplY3R8c3RyaW5nfSBKU09OIHN0cnVjdHVyZSBjb250YWluaW5nIHJvdyBkYXRhIGFuZC9vciB0YWJsZSBzdHJ1Y3R1cmUgYXMgZWl0aGVyIGEgSlNPTiBvYmplY3Qgb3Igc3RyaW5nXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXG4gIH0pXG4gIGltcG9ydEpzb25Ub0RiKGRiOiBhbnksIGpzb246IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydHMgYSBTUUxpdGUgREIgYXMgYSBKU09OIHN0cnVjdHVyZVxuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXG4gIH0pXG4gIGV4cG9ydERiVG9Kc29uKGRiOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaXBlcyBhbGwgZGF0YSBmcm9tIGEgZGF0YWJhc2UgYnkgZHJvcHBpbmcgYWxsIGV4aXN0aW5nIHRhYmxlc1xuICAgKiBAcGFyYW0gZGIge09iamVjdH0gRGF0YWJhc2Ugb2JqZWN0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICBzdWNjZXNzTmFtZTogJ3N1Y2Nlc3NGbicsXG4gICAgZXJyb3JOYW1lOiAnZXJyb3JGbicsXG4gIH0pXG4gIHdpcGVEYihkYjogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==